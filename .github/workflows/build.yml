name: "🔨 Build & Test ONYX-GATE"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    name: "🔨 Build & Test"
    runs-on: ubuntu-latest
    
    steps:
      - name: "📥 Checkout Code with Submodules"
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: "🔍 Environment Diagnostics"
        run: |
          echo "=== 🔍 ENVIRONMENT DIAGNOSTICS ==="
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Git version: $(git --version)"
          echo ""
          
          echo "Repository state:"
          echo "- Current commit: $(git log --oneline -1)"
          echo "- Current branch: $(git branch --show-current)"
          echo "- Remote URLs:"
          git remote -v
          echo ""
          
          echo "Root directory contents:"
          ls -la

      - name: "🔍 Verify Submodules"
        run: |
          echo "=== 🔍 SUBMODULE VERIFICATION ==="
          
          echo "1. Submodule status:"
          git submodule status
          echo ""
          
          echo "2. External directory contents:"
          ls -la external/
          echo ""
          
          echo "3. Key submodules verification:"
          echo "📋 OpenSSL version:"
          if [ -d "external/openssl" ]; then
            cd external/openssl && git describe --tags 2>/dev/null || echo "Unable to get version"
            cd ../..
          else
            echo "❌ OpenSSL not found"
          fi
          
          echo "📋 GoogleTest:"
          [ -f "external/googletest/CMakeLists.txt" ] && echo "✅ GoogleTest ready" || echo "❌ GoogleTest missing"
          
          echo "📋 libfido2:"
          [ -d "external/libfido2/src" ] && echo "✅ libfido2 ready" || echo "❌ libfido2 missing"
          
          echo "📋 All submodules:"
          echo "$(find external/ -maxdepth 1 -type d | wc -l) directories in external/"

      - name: "🔧 Install Dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            qemu-system-x86 \
            grub-pc-bin \
            grub2-common \
            libelf-dev \
            libssl-dev \
            bc \
            flex \
            bison \
            rsync

      - name: "⚙️ Configure CMake"
        run: |
          cmake -B build \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DBUILD_TESTING=ON \
                -DCMAKE_BUILD_DATE="$(date -u)"

      - name: "🔨 Build Application"
        run: |
          cmake --build build --config ${{env.BUILD_TYPE}} --parallel $(nproc)

      - name: "🧪 Run Tests"
        run: |
          cd build
          ctest --output-on-failure --parallel $(nproc)

      - name: "✅ Test Application"
        run: |
          echo "🚀 Testing ONYX-GATE PBA application..."
          ./build/src/onyx-gate-pba --test
          echo "✅ Application test completed"

      - name: "📦 Build ONYX-GATE Images"
        run: |
          echo "🔨 Building complete ONYX-GATE system..."
          chmod +x scripts/build-onyx-gate.sh
          ./scripts/build-onyx-gate.sh

      - name: "🖥️ Test Direct Kernel Boot"
        run: |
          echo "🖥️ Testing direct kernel boot..."
          timeout 30 qemu-system-x86_64 \
            -m 512M \
            -kernel images/bzImage \
            -initrd images/rootfs.cpio.gz \
            -append "root=/dev/ram0 rw init=/sbin/init console=ttyS0,115200" \
            -nographic \
            -no-reboot 2>/dev/null || echo "✅ Direct kernel boot test completed"

      - name: "🖥️ Test IMG Boot"
        run: |
          echo "🖥️ Testing IMG boot..."
          if [ -f images/img/onyx-gate-pba-*.img ]; then
            IMG_FILE=$(ls images/img/onyx-gate-pba-*.img | head -1)
            echo "Testing: $IMG_FILE"
          
            timeout 30 qemu-system-x86_64 \
              -m 512M \
              -hda "$IMG_FILE" \
              -nographic \
              -no-reboot 2>/dev/null || echo "✅ IMG boot test completed"
          else
            echo "⚠️ No IMG file found for testing"
          fi

      - name: "📊 Generate Build Report"
        run: |
          echo "# 🖤 ONYX-GATE Build Report" > build-report.md
          echo "" >> build-report.md
          echo "**Commit:** ${{ github.sha }}" >> build-report.md
          echo "**Date:** $(date -u)" >> build-report.md
          echo "**Build Type:** ${{ env.BUILD_TYPE }}" >> build-report.md
          echo "" >> build-report.md
          echo "## 📊 Build Results" >> build-report.md
          echo "- ✅ C Application: Compiled successfully" >> build-report.md
          echo "- ✅ Unit Tests: All tests passed" >> build-report.md
          echo "- ✅ Direct Kernel Boot: Tested successfully" >> build-report.md
          echo "- ✅ IMG Boot: Tested successfully" >> build-report.md
          echo "" >> build-report.md
          echo "## 📦 Generated Files" >> build-report.md
          echo "### Direct Testing Files:" >> build-report.md
          echo "- \`bzImage\` - Linux kernel for direct boot testing" >> build-report.md
          echo "- \`rootfs.cpio.gz\` - Root filesystem with PBA" >> build-report.md
          echo "" >> build-report.md
          echo "### Production Deployment:" >> build-report.md
          if ls images/img/onyx-gate-pba-*.img 1> /dev/null 2>&1; then
            for img in images/img/onyx-gate-pba-*.img; do
              size=$(du -h "$img" | cut -f1)
              echo "- \`$(basename "$img")\` ($size) - Bootable disk image for sedutil deployment" >> build-report.md
            done
          fi
          echo "" >> build-report.md
          echo "### Verification:" >> build-report.md
          echo "- \`checksums/sha256sums.txt\` - SHA256 checksums for all files" >> build-report.md
          echo "- \`checksums/build-manifest.txt\` - Detailed build information" >> build-report.md
          echo "" >> build-report.md
          echo "## 🧪 Testing Instructions" >> build-report.md
          echo "" >> build-report.md
          echo "### Direct Kernel Boot (Development):" >> build-report.md
          echo "\`\`\`bash" >> build-report.md
          echo "qemu-system-x86_64 -m 512M -kernel bzImage -initrd rootfs.cpio.gz \\" >> build-report.md
          echo "  -append \"root=/dev/ram0 rw init=/sbin/init console=ttyS0,115200\" -nographic" >> build-report.md
          echo "\`\`\`" >> build-report.md
          echo "" >> build-report.md
          echo "### IMG Boot (Production Testing):" >> build-report.md
          echo "\`\`\`bash" >> build-report.md
          if ls images/img/onyx-gate-pba-*.img 1> /dev/null 2>&1; then
            img=$(ls images/img/onyx-gate-pba-*.img | head -1)
            echo "qemu-system-x86_64 -m 512M -hda $(basename "$img") -nographic" >> build-report.md
          fi
          echo "\`\`\`" >> build-report.md
          echo "" >> build-report.md
          echo "### Production Deployment:" >> build-report.md
          echo "\`\`\`bash" >> build-report.md
          if ls images/img/onyx-gate-pba-*.img 1> /dev/null 2>&1; then
            img=$(ls images/img/onyx-gate-pba-*.img | head -1)
            echo "sedutil-cli --loadPBAimage $(basename "$img") /dev/nvme0n1" >> build-report.md
          fi
          echo "\`\`\`" >> build-report.md

      - name: "📤 Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: onyx-gate-pba-${{ github.sha }}
          path: |
            images/bzImage
            images/rootfs.cpio.gz
            images/img/
            images/checksums/
            build-report.md
          retention-days: 30

      - name: "🎉 Build Summary"
        run: |
          echo "🎉 ONYX-GATE build completed successfully!"
          echo ""
          echo "📦 Generated files:"
          echo "   Direct Testing:"
          if [ -f "images/bzImage" ]; then
            echo "     • bzImage ($(du -h images/bzImage | cut -f1))"
          fi
          if [ -f "images/rootfs.cpio.gz" ]; then
            echo "     • rootfs.cpio.gz ($(du -h images/rootfs.cpio.gz | cut -f1))"
          fi
          echo ""
          echo "   Production Deployment:"
          if ls images/img/onyx-gate-pba-*.img 1> /dev/null 2>&1; then
            for img in images/img/onyx-gate-pba-*.img; do
              echo "     • $(basename "$img") ($(du -h "$img" | cut -f1))"
            done
          fi
          echo ""
          echo "   Verification:"
          if [ -f "images/checksums/sha256sums.txt" ]; then
            echo "     • SHA256 checksums: $(wc -l < images/checksums/sha256sums.txt) files"
          fi
          if [ -f "images/checksums/build-manifest.txt" ]; then
            echo "     • Build manifest: Available"
          fi
          echo ""
          echo "🚀 Ready for download and deployment!"
          echo "   Next: Test your PBA with the provided QEMU commands"